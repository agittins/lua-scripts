--[[

    gimp_stack.lua - export multiple images and open as layers in gimp

    Copyright (C) 2016 Bill Ferguson <wpferguson@gmail.com>.

    Portions are lifted from hugin.lua and thus are 

    Copyright (c) 2014  Wolfgang Goetz
    Copyright (c) 2015  Christian Kanzian
    Copyright (c) 2015  Tobias Jakobs


    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
]]
--[[
    gimp_stack - export multiple images and open as layers with gimp for editing

    This script provides another storage (export target) for darktable.  Selected
    images are exported in the specified format to temporary storage.  The images are 
    combined into a single file. Gimp is launched and opens the merged file.  A dialog 
    prompts to import the image as layers. After editing, the image is imported back into
    the current collection, using the path of the first image selected, as stack.tif.  
    The image is then imported into the database.  The exported files that made up the 
    stacked image are deleted from temporary storage to avoid cluttering up the system. 
    

    ADDITIONAL SOFTWARE NEEDED FOR THIS SCRIPT
    * gimp - http://www.gimp.org
    * imagemagick - http://www.imagemagick.org

    USAGE
    * require this script from your main lua file
    * select an images to stack and edit with gimp
    * in the export dialog select "Edit as layers with gimp" and select the format and bit depth for the
      exported image
    * Press "export"
    * Import the image as layers when gimp starts
    * Edit the image with gimp then save the changes with File->Overwrite....
    * Exit gimp
    * The edited image will be imported and grouped with the original collection

    CAVEATS
    * Developed and tested on Ubuntu 14.04 LTS with darktable 2.0.3 and gimp 2.9.3 (development version with
      > 8 bit color)
    * There is no provision for dealing with the xcf files generated by gimp, since darktable doesn't deal with 
      them.  You may want to save the xcf file if you intend on doing further edits to the image or need to save 
      the layers used.  Where you save them is up to you.

    BUGS, COMMENTS, SUGGESTIONS
    * Send to Bill Ferguson, wpferguson@gmail.com
]]

local dt = require "darktable"
local dtutils = require "contrib/dtutils"
local gettext = dt.gettext

dt.configuration.check_version(...,{3,0,0})

-- Tell gettext where to find the .mo file translating messages for a particular domain
gettext.bindtextdomain("gimp_stack",dt.configuration.config_dir.."/lua/")

-- Thanks to http://lua-users.org/wiki/SplitJoin for the split and split_path functions
local function _(msgid)
    return gettext.dgettext("gimp_stack", msgid)
end

local function show_status(storage, image, format, filename,
  number, total, high_quality, extra_data)
  dt.print(string.format(_("Exporting to gimp %i/%i"), number, total))
end

local function gimp_stack_edit(storage, image_table, extra_data) --finalize
  if not dtutils.checkIfBinExists("gimp") then
    dt.print_error(_("gimp not found"))
    return
  end

  if not dtutils.checkIfBinExists("convert") then
    dt.print_error(_("convert not found"))
    return
  end

  -- list of exported images 
  local img_list

   -- reset and create image list
  img_list = ""

  for _,exp_img in pairs(image_table) do
    img_list = img_list ..exp_img.. " "
  end
  dt.print_error(img_list)

  local tmp_stack_image = dt.configuration.tmp_dir.."/stack.tif"

  dt.print(_("Stacking images..."))

  os.execute("convert "..img_list.." "..tmp_stack_image)
  os.execute("rm "..img_list)

  dt.print(_("Launching gimp..."))

  local gimpStartCommand
  gimpStartCommand = "gimp "..tmp_stack_image
  
  dt.print_error(gimpStartCommand)

  coroutine.yield("RUN_COMMAND", gimpStartCommand)

  -- for each of the exported images
  -- find the matching original image
  -- then move the exported image into the directory with the original  
  -- then import the image into the database which will group it with the original
  -- and then copy over any tags other than darktable tags

  local collection_path = dt.gui.action_images[1].path
  local final_stack_image = collection_path.."/stack.tif"
  os.execute("mv "..tmp_stack_image.." "..final_stack_image)
  local myimage = dt.database.import(final_stack_image)
  
end

-- Register
dt.register_storage("module_gimp_stack", _("Edit as layers with gimp"), show_status, gimp_stack_edit)

--


